#!/usr/bin/env ruby

# frozen-string-literal: true

require 'runbook'
require_relative '../lib/jiratk'

# Helper class for keep in the json generation under control.
# TODO: Move to an Issue class
class Issue
  def initialize(ticket)
    @project_key = ticket.project_key
    @issuetype_name = ticket.issuetype_name
    @gem = ticket.gem
    @version = ticket.version
  end

  def summary
    raise NotImplementedError # "update  #{@gem} gem to version #{@version}"
  end

  def description
    raise NotImplementedError
  end

  def issuetype
    { "name": @issuetype_name }
  end

  def labels
    raise NotImplementedError # ['maintenance']
  end

  def acceptance_criteria
    'ensure all specs and features pass'
    # {
    #   "version": 1,
    #   "type": 'doc',
    #   "content": [
    #     {
    #       "type": 'paragraph',
    #       "content": [
    #         { "type": 'text', "text": 'Here is the autogenerated acceptance criteria.' }
    #       ]
    #     }
    #   ]
    # }
  end

  def project
    { "key": @project_key }
  end

  def time_estimate
    { "originalEstimate": '15m' }
  end

  def to_h
    {
      fields: {
        project: project,
        summary: summary,
        description: description,
        issuetype: issuetype,
        labels: labels,
        timetracking: time_estimate,
        customfield_10029: acceptance_criteria
      }
    }
  end
end

# Subclass to reduce cognitive load
class GemIssue < Issue
  def summary
    "update #{@gem} gem to version #{@version}"
  end

  def labels
    ['maintenance']
  end

  def description
    'updating a ruby gem'
  end
end

require 'ostruct'

# rubocop:disable Metrics/BlockLength
runbook = Runbook.book 'Update gem' do
  # TODO: add setup section for instantiating ApiHelper

  section 'collect gem information' do
    step 'collect project name' do
      ask 'what project?', into: :project
      ask 'what gem?', into: :gem
      ask 'what version?', into: :version
      ruby_command do
        confirm "project name #{project}?"
        confirm "gem name #{gem}?"
        confirm "version number #{version}?"
      end
    end

    step 'load up the struct' do
      ruby_command do
        ticket = OpenStruct.new(
          project_key: project,
          issuetype_name: 'Task',
          gem: gem,
          version: version
        )
        params = GemIssue.new(ticket).to_h
        confirm "Gem update parameters: #{params}"

        api_keys = AccountManager.new.api_keys
        username = api_keys[:jira_id]
        password = api_keys[:jira_key]
        api_helper = ApiHelper.new(username, password)
        api_url = 'https://doolin.atlassian.net/rest/api/2/issue/'

        api_helper.post(api_url, params)
      end
    end
  end
end
# rubocop:enable Metrics/BlockLength

if __FILE__ == $PROGRAM_NAME
  Runbook::Runner.new(runbook).run
else
  runbook
end
